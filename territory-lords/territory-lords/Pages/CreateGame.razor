@page "/creategame"
@using Microsoft.Extensions.Logging
@using territory_lords.Data.Cache;
@inject NavigationManager NavManager
@inject GameBoardCache BoardCache

<h3>CreateGame</h3>
@if(ShowError)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@string.Join(";", errorMessages)</MudAlert>
}

<form @onsubmit="BuildGame">
    <div class="form-group">
        <label>Game Id:</label>
        <input @bind="GameId" size="100" pattern="^[a-zA-Z0-9_-]{1,100}$" minlength="1"/>
    </div>
    <div class="form-group">
        <label>Game Board Size:</label>
        
        <label>Rows:</label>
        <input @bind="Rows"  type="number" min="@minColumnRows" max="@maxColumnRows"  />

        <label>Columns:</label>
        <input @bind="Columns" type="number" min="@minColumnRows" max="@maxColumnRows" />
       
    </div>
    <div class="form-group">
        <label>Land Mass</label>
        <label>Islands</label>
        <input @bind=LandMass type="range" min="@minRange" max="@maxRange"/>
        <label>Continent</label>
    </div>
    <div class="form-group">
        <label>Temperature</label>
        <label>Colder</label>
        <input @bind=Temperature type="range" min="@minRange" max="@maxRange"/>
        <label>Hotter</label>
    </div>
    <div class="form-group">
        <label>Climate</label>
        <label>Arid</label>
        <input @bind=Climate type="range" min="@minRange" max="@maxRange"/>
        <label>Wet</label>
    </div>
    <div class="form-group">
        <label>Age</label>
        <label>Mountainous</label>
        <input @bind=Age type="range" min="@minRange" max="@maxRange"/>
        <label>Hillanous</label>
    </div>
    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Create" Color="Color.Primary" ButtonType="ButtonType.Submit">Create Game</MudButton>
    <div>@GameId</div>
</form>

@code {
    private string GameId = "";
    private byte Columns;
    private byte Rows;
    private byte LandMass;
    private byte Temperature;
    private byte Climate;
    private byte Age;
    private bool ShowError = false;
    private readonly byte minColumnRows = 20;//I think it would be fun to have small worlds like 10 x 10 but the world generation does not appreciate small worlds!
    private readonly byte maxColumnRows = 80;
    private readonly byte minRange = 0;
    private readonly byte maxRange = 2;
    private List<string> errorMessages = new List<string>();

    protected override void OnInitialized()
    {
        //setup a bunch of random values to start the user off
        var random = new Random();
        GameId = Guid.NewGuid().ToString();
        Columns = (byte)random.Next(minColumnRows, maxColumnRows + 1);
        Rows = (byte)random.Next(minColumnRows, maxColumnRows + 1);
        LandMass = (byte)random.Next(minRange, maxRange + 1);
        Temperature = (byte)random.Next(minRange, maxRange + 1);
        Climate = (byte)random.Next(minRange, maxRange + 1);
        Age = (byte)random.Next(minRange, maxRange + 1);

    }
    private async Task BuildGame()
    {
        //need to reset showError at beginning
        ShowError = false;

        //make sure the inputs are valid to build a game board
        if (Columns < minColumnRows || Columns > maxColumnRows)
        {
            ShowError = true;
            errorMessages.Add($"Columns falls outside of range {minColumnRows} - {maxColumnRows}");
        }

        if (Rows < minColumnRows || Rows > maxColumnRows)
        {
            ShowError = true;
            errorMessages.Add($"Rows falls outside of range {minColumnRows} - {maxColumnRows}");
        }

        if (string.IsNullOrWhiteSpace(GameId))
        {
            ShowError = true;
            errorMessages.Add($"GameId cannot be blank");
        }

        //see if there is already a game at that address
        if (BoardCache.GetGameBoard(GameId) != null)
        {
            ShowError = true;
            errorMessages.Add($"There is already a Game with the Id of {GameId}");
        }

        if (ShowError)
            return;


        //create the game and save it
        var TheGameBoard = new GameBoard(GameId, Rows, Columns, LandMass, Temperature, Climate, Age);
        TheGameBoard.InitBoard();
        BoardCache.UpdateGameCache(TheGameBoard);

        //redirect the player to the game address
        NavManager.NavigateTo($"/Map/{GameId}");

    }
}

