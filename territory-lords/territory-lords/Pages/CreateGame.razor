@page "/creategame"
@using Microsoft.Extensions.Logging
@using territory_lords.Data
@using territory_lords.Data.Cache
@using territory_lords.Data.Statics
@inject NavigationManager NavManager
@inject GameBoardCache BoardCache

<MudText Typo="Typo.h3" Class="mx-auto">CreateGame</MudText>
@if(ShowError)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@string.Join(";", errorMessages)</MudAlert>
}

<MudContainer>
    <MudForm @onsubmit="BuildGame">
        <MudPaper Class="pa-6 mt-2 mb-4">
            <MudTextField @bind-Value="@GameId" Label="The Game Id"   
            Required="true" RequiredError="GameId is required" Variant="Variant.Text"
            HelperText="This will be the name of your game and the URL to it as well" Margin="Margin.Dense"/>
        </MudPaper>
        <MudPaper Class="pa-6 mt-2 mb-4">
            <label>World Size:</label>
            <MudNumericField @bind-Value="@Rows" Label="Height" Variant="Variant.Text" Min="@minColumnRows" Max="@maxColumnRows" />
            <MudNumericField @bind-Value="@Columns" Label="Width" Variant="Variant.Text" Min="@minColumnRows" Max="@maxColumnRows"/>
        </MudPaper>
        <MudPaper Class="pa-6 mt-2 mb-4">
            <label>Land Masses</label>
            <MudSlider @bind-value="@LandMass" Size="Size.Large" Step="1" TickMarks="true" TickMarkLabels="@landMassLabels" Min="@minRange" Max="@maxRange"/>
        </MudPaper>
        <MudPaper Class="pa-6 mt-2 mb-4">
            <label>Temperature</label>
            <MudSlider @bind-value="@Temperature" Size="Size.Large" Step="1" TickMarks="true" TickMarkLabels="@temperatureLabels" Min="@minRange" Max="@maxRange"/>
        </MudPaper>
        <MudPaper Class="pa-6 mt-2 mb-4">
            <label>Climate</label>
            <MudSlider @bind-value="@Climate" Size="Size.Large" Step="1" TickMarks="true" TickMarkLabels="@climateLabels" Min="@minRange" Max="@maxRange"/>
        </MudPaper>
        <MudPaper Class="pa-6 mt-2 mb-4">
            <label>Age</label>
            <MudSlider @bind-value="@Age" Size="Size.Large" Step="1" TickMarks="true" TickMarkLabels="@ageLabels" Min="@minRange" Max="@maxRange"/>
        </MudPaper>
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Create" Color="Color.Primary" ButtonType="ButtonType.Submit">Create Game</MudButton>
    </MudForm>
</MudContainer>

@code {
    private string GameId = "";
    private byte Columns;
    private byte Rows;
    private int LandMass;
    private int Temperature;
    private int Climate;
    private int Age;
    private bool ShowError = false;
    private readonly byte minColumnRows = 20;//I think it would be fun to have small worlds like 10 x 10 but the world generation does not appreciate small worlds!
    private readonly byte maxColumnRows = 80;
    private readonly byte minRange = 0;
    private readonly byte maxRange = 2;
    private List<string> errorMessages = new List<string>();
    private string[] landMassLabels = new string[] { "Small", "Normal", "Large" };
    private string[] temperatureLabels = new string[] { "Cold", "Temperate", "Warm" };
    private string[] climateLabels = new string[] { "Arid", "Normal", "Wet" };
    private string[] ageLabels = new string[] { "3-Bill", "4-Billion", "5-Billion" };


    protected override void OnInitialized()
    {
        //setup a bunch of random values to start the user off
        var random = new Random();
        GameId = Guid.NewGuid().ToString();
        Columns = (byte)random.Next(minColumnRows, maxColumnRows + 1);
        Rows = (byte)random.Next(minColumnRows, maxColumnRows + 1);
        LandMass = (byte)random.Next(minRange, maxRange + 1);
        Temperature = (byte)random.Next(minRange, maxRange + 1);
        Climate = (byte)random.Next(minRange, maxRange + 1);
        Age = (byte)random.Next(minRange, maxRange + 1);

    }
    private void BuildGame()
    {
        //need to reset showError at beginning
        ShowError = false;

        //make sure the inputs are valid to build a game board
        if (Columns < minColumnRows || Columns > maxColumnRows)
        {
            ShowError = true;
            errorMessages.Add($"Columns falls outside of range {minColumnRows} - {maxColumnRows}");
        }

        if (Rows < minColumnRows || Rows > maxColumnRows)
        {
            ShowError = true;
            errorMessages.Add($"Rows falls outside of range {minColumnRows} - {maxColumnRows}");
        }

        if (string.IsNullOrWhiteSpace(GameId))
        {
            ShowError = true;
            errorMessages.Add($"GameId cannot be blank");
        }

        //see if there is already a game at that address
        if (BoardCache.GetGameBoard(GameId) != null)
        {
            ShowError = true;
            errorMessages.Add($"There is already a Game with the Id of {GameId}");
        }

        if (ShowError)
            return;


        //create the game and save it
        var worldBuilder = new WorldBuilder(GameId, Rows, Columns, LandMass, Temperature, Climate, Age);
        var theGameBoard = worldBuilder.GenerateWorld();
        BoardCache.UpdateGameCache(theGameBoard);

        //redirect the player to the game address
        NavManager.NavigateTo($"/Map/{GameId}");

    }
}

