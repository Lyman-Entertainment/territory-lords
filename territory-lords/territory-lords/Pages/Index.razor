@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Authentication
@using Microsoft.Extensions.Logging
@using territory_lords.Logger
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TokenProvider TokenProvider
@implements IAsyncDisposable

<AuthorizeView>
    <Authorized>
        <form @onsubmit="Send">
            <div class="form-group">
                <label>Message:</label>
                <MudTextField T="string" Label="Filled" Variant="Variant.Filled" Text="@messageInput" Lines="3" />
                <input @bind="messageInput" size="50" />

            </div>
            <MudButton @onclick="Send" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" Disabled="@(!IsConnected)">Send</MudButton>
            <hr>
            <ul id="messagesList">
                @foreach (var chatMessage in ChatMessages)
                {
                    <li class="message @(chatMessage.Mine ?  "my-message" : "their-message" )">
                        <MudCard>
                            <MudText>@chatMessage.UserName : @chatMessage.Message</MudText>
                        </MudCard>
                    </li>
                }
            </ul>
        </form>
    </Authorized>
    <NotAuthorized>
        you made it and you're not authorized
    </NotAuthorized>
</AuthorizeView>

@code {

    private HubConnection hubConnection;
    private List<ChatMessage> ChatMessages = new List<ChatMessage>();
    private string userName;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
    .WithUrl(
            NavigationManager.ToAbsoluteUri("/chathub"), options =>
            {
                options.AccessTokenProvider = GetAccessToken;
            })
    .ConfigureLogging(logging =>
    {
        logging.AddFilter("Microsoft.AspNetCore.SignalR", LogLevel.Debug);
    })
    .Build();


        hubConnection.On<ChatMessage>("ReceiveMessage", (message) =>
        {
            //I'm not sure I like how this is handled
            message.Mine = false;//we're assuming any message coming in from the hub isn't ours
            ChatMessages.Add(message);
            StateHasChanged();
        });

        await hubConnection.StartAsync();

    }

    private async Task Send()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false);
        var user = authState.User;
        var chatMessage = new ChatMessage
        {
            UserName = user.Identity.Name
            ,
            Message = messageInput
            ,
            Mine = true
        };
        await hubConnection.SendAsync("SendMessage", chatMessage);
        ChatMessages.Add(chatMessage);
        ClearMessageInput();

    }


    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }

    private void ClearMessageInput()
    {
        messageInput = "";
    }

    private async Task<string> GetAccessToken()
    {
        return await Task.FromResult<string>(TokenProvider.AccessToken);
    }
}
