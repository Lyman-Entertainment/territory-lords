@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

<AuthorizeView>
    <form @onsubmit="Send">
        <div class="form-group">
            <label>Message:</label>
            <input @bind="messageInput" size="50"/>
        </div>
        <MudButton @onclick="Send" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" Disabled="@(!IsConnected)">Send</MudButton>
        <hr>
        <ul id="messagesList">
            @foreach (var message in messages)
            {
                <li>@message</li>
            }
        </ul>
    </form>
</AuthorizeView>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    //private string userName;
    private string messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false);
        var user = authState.User;
        await hubConnection.SendAsync("SendMessage", user.Identity.Name, messageInput);
    }


    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}
