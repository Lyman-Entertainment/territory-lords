@page "/Map/{gameBoardId}"
@using Microsoft.Extensions.Logging
@using territory_lords.Data
@using territory_lords.Data.Cache;
@using Microsoft.AspNetCore.WebUtilities;
@using territory_lords.Data.Models;
@inject NavigationManager NavManager
@inject GameBoardCache BoardCache
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<h1>Game @GameBoardId</h1>
<NavLink class="nav-link" href="@GetRandomGameBoardIdURL()">
    <span class="oi " aria-hidden="true"></span> New Map
</NavLink>
<GameBoardDisplay TheGameBoard="TheGameBoard" />

@code {
    [Parameter]
    public string GameBoardId { get; set; }


    GameBoard? TheGameBoard;

    protected override void OnParametersSet()
    {
        TheGameBoard = BoardCache.GetGameBoard(GameBoardId);

        if(TheGameBoard == null)
        {
            var worldBuilder = new WorldBuilder(GameBoardId);
            TheGameBoard = worldBuilder.GenerateWorld();
            BoardCache.UpdateGameCache(TheGameBoard);
        }

        //var authUser = (await AuthenticationStateProvider.GetAuthenticationStateAsync().ConfigureAwait(false)).User;
        //var possibleGuidString = authUser.FindFirst(c => c.Type.Contains("objectidentifier"))?.Value;
        //if (possibleGuidString != null)
        //{
        //    //add them to the board and update the board cache. This really should be handled by something else
        //    var playerGuid = new Guid(possibleGuidString);
        //    Player? addedPlayer = TheGameBoard.AddPlayerToGame(playerGuid, authUser.Identity.Name);
        //    if (addedPlayer != null)
        //    {
        //        //add in a settler somewhere
        //        var settler = new Data.Models.Units.Settler(addedPlayer);
        //        TheGameBoard.InsertUnitToMap(settler);
        //        BoardCache.UpdateGameCache(TheGameBoard);
        //    }
        //}
    }

    private string GetRandomGameBoardIdURL()
    {
        return $"Map/{GetRandomNumberBetween(1, 1000)}";
    }

    /// <summary>
    /// Gets a random number between two digits
    /// </summary>
    /// <param name="begin"></param>
    /// <param name="end"></param>
    /// <returns></returns>
    private int GetRandomNumberBetween(int begin, int end)
    {
        var rnd = new Random();
        return rnd.Next(begin, end);
    }
}
