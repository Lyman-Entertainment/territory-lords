@using territory_lords.Data.Models.Tiles
@using territory_lords.Data.Models.Units
@using territory_lords.Data.Statics.Extensions

<div id="BoardWrapper">


    @if (_showUnitOrderMenu)
    {
        <OrderMenu OrderOptions=@_unitMenuOptions ParentMethod=@HandleOrderMenuClick/>
    }

    @if(_showCityMenu)
    {
        <CityMenu ClickedCity="@_clickedCity" CloseCityMenuMethod="@DestroyCityMenu"/>
    }
    

    <div id="BoardContainer">
        @for (int r = 0; r < TheGameBoard.RowCount; r++)
        {
            <div class="game-board-row">
                @for (int c = 0; c < TheGameBoard.ColumnCount; c++)
                {
                    GameBoardTile gameTile = TheGameBoard.GameTileLayer[r, c];
                    //UnitTile? unitTile = TheGameBoard.UnitTileLayer[r, c];
                    var unitsAtTile = TheGameBoard.UnitBag.Where(u => u.Coordinate.IsAtPoint(r, c));
                    var cityAtTile = TheGameBoard.CityLayer.GetValueOrDefault(new GameBoardCoordinate(r, c));

                    var shadowColor = "";
                    if (gameTile.OwningPlayer != null)
                    {
                        shadowColor = $"box-shadow: inset 0 0 5px 2px {gameTile.OwningPlayer.Colors.TileColor};";
                    }

                    <div class="game-board-tile @GetCorrectBackgroundCssClass(gameTile)" style="@shadowColor" @onclick="() => HandleGameBoardSquareClick(gameTile)">
                        
                        @if (gameTile.Special)
                        {
                            <div class="Tile-special">
                                <img class="@GetCorrectSpecialCssClass(gameTile.LandType)" src="/Images/Layer2Sprite.png"/>
                            </div>
                        }

                        @if (gameTile.Improvement != null)
                        {
                            @*var improvementColor = string.Empty;
                            //cities need borders. Should maybe make this a property of improvements so the piece itself will know
                            @if (gameTile.Improvement.GetType().Name == "City")
                            {
                                improvementColor = $"background-color: {gameTile.Improvement.OwningPlayer.Colors.TileColor};";
                            }
                            <div class="Tile-improvement">
                            <img class="@(gameTile.Improvement.GetType().Name)" style="@improvementColor" src="/Images/Layer2Sprite.png"/>
                            </div>*@
                        }
                        
                        @if (cityAtTile != null)
                        {
                            var improvementColor = $"background-color: {cityAtTile.OwningPlayer.Colors.TileColor};";
                            <div class="Tile-city" @onclick="() => HandleCityClick(cityAtTile)" @onclick:stopPropagation="true">
                                <img class="City" style="@improvementColor" src="/Images/Layer2Sprite.png"/>
                                <div class="City-size">@cityAtTile.Size</div>
                                <div class="City-name">@cityAtTile.Name</div>
                            </div>
                        }

                        @if(unitsAtTile.Count() > 0)
                        {
                            foreach (var unit in unitsAtTile)
                            {
                                var unitColor = $"background-color: {unit.OwningPlayer.Colors.TileColor}; border-color:{unit.OwningPlayer.Colors.BorderColor}";
                                bool unitAcitve = unit.Active && unit.OwningPlayer.Id == CurrentPlayerGuid;
                                <div class="Unit @(unitAcitve ? "Active" : "")" @onclick="() => HandleUnitTileClick(unit)"  @onclick:stopPropagation="true">
                                    <img class ="@(unit.GetType().Name)" style="@unitColor" src="/Images/Layer2Sprite.png"/>
                                </div>
                            }
                            
                        }
                    </div>
                }
            </div>
        }
    </div>
</div>
